// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/01/2023 21:51:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_sample_tst(
	A,
	B,
	op_sel,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input [1:0] op_sel;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or op_sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula_vlg_check_tst (
	flag_N,
	flag_Z,
	S,
	seg_A,
	seg_B,
	seg_C,
	seg_D,
	seg_E,
	seg_F,
	seg_G,
	sampler_rx
);
input  flag_N;
input  flag_Z;
input [3:0] S;
input  seg_A;
input  seg_B;
input  seg_C;
input  seg_D;
input  seg_E;
input  seg_F;
input  seg_G;
input sampler_rx;

reg  flag_N_expected;
reg  flag_Z_expected;
reg [3:0] S_expected;
reg  seg_A_expected;
reg  seg_B_expected;
reg  seg_C_expected;
reg  seg_D_expected;
reg  seg_E_expected;
reg  seg_F_expected;
reg  seg_G_expected;

reg  flag_N_prev;
reg  flag_Z_prev;
reg [3:0] S_prev;
reg  seg_A_prev;
reg  seg_B_prev;
reg  seg_C_prev;
reg  seg_D_prev;
reg  seg_E_prev;
reg  seg_F_prev;
reg  seg_G_prev;

reg  flag_N_expected_prev;
reg  flag_Z_expected_prev;
reg [3:0] S_expected_prev;
reg  seg_A_expected_prev;
reg  seg_B_expected_prev;
reg  seg_C_expected_prev;
reg  seg_D_expected_prev;
reg  seg_E_expected_prev;
reg  seg_F_expected_prev;
reg  seg_G_expected_prev;

reg  last_flag_N_exp;
reg  last_flag_Z_exp;
reg [3:0] last_S_exp;
reg  last_seg_A_exp;
reg  last_seg_B_exp;
reg  last_seg_C_exp;
reg  last_seg_D_exp;
reg  last_seg_E_exp;
reg  last_seg_F_exp;
reg  last_seg_G_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	flag_N_prev = flag_N;
	flag_Z_prev = flag_Z;
	S_prev = S;
	seg_A_prev = seg_A;
	seg_B_prev = seg_B;
	seg_C_prev = seg_C;
	seg_D_prev = seg_D;
	seg_E_prev = seg_E;
	seg_F_prev = seg_F;
	seg_G_prev = seg_G;
end

// update expected /o prevs

always @(trigger)
begin
	flag_N_expected_prev = flag_N_expected;
	flag_Z_expected_prev = flag_Z_expected;
	S_expected_prev = S_expected;
	seg_A_expected_prev = seg_A_expected;
	seg_B_expected_prev = seg_B_expected;
	seg_C_expected_prev = seg_C_expected;
	seg_D_expected_prev = seg_D_expected;
	seg_E_expected_prev = seg_E_expected;
	seg_F_expected_prev = seg_F_expected;
	seg_G_expected_prev = seg_G_expected;
end


// expected S[ 3 ]
initial
begin
	S_expected[3] = 1'bX;
end 
// expected S[ 2 ]
initial
begin
	S_expected[2] = 1'bX;
end 
// expected S[ 1 ]
initial
begin
	S_expected[1] = 1'bX;
end 
// expected S[ 0 ]
initial
begin
	S_expected[0] = 1'bX;
end 

// expected flag_N
initial
begin
	flag_N_expected = 1'bX;
end 

// expected flag_Z
initial
begin
	flag_Z_expected = 1'bX;
end 

// expected seg_A
initial
begin
	seg_A_expected = 1'bX;
end 

// expected seg_B
initial
begin
	seg_B_expected = 1'bX;
end 

// expected seg_C
initial
begin
	seg_C_expected = 1'bX;
end 

// expected seg_D
initial
begin
	seg_D_expected = 1'bX;
end 

// expected seg_E
initial
begin
	seg_E_expected = 1'bX;
end 

// expected seg_F
initial
begin
	seg_F_expected = 1'bX;
end 

// expected seg_G
initial
begin
	seg_G_expected = 1'bX;
end 
// generate trigger
always @(flag_N_expected or flag_N or flag_Z_expected or flag_Z or S_expected or S or seg_A_expected or seg_A or seg_B_expected or seg_B or seg_C_expected or seg_C or seg_D_expected or seg_D or seg_E_expected or seg_E or seg_F_expected or seg_F or seg_G_expected or seg_G)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected flag_N = %b | expected flag_Z = %b | expected S = %b | expected seg_A = %b | expected seg_B = %b | expected seg_C = %b | expected seg_D = %b | expected seg_E = %b | expected seg_F = %b | expected seg_G = %b | ",flag_N_expected_prev,flag_Z_expected_prev,S_expected_prev,seg_A_expected_prev,seg_B_expected_prev,seg_C_expected_prev,seg_D_expected_prev,seg_E_expected_prev,seg_F_expected_prev,seg_G_expected_prev);
	$display("| real flag_N = %b | real flag_Z = %b | real S = %b | real seg_A = %b | real seg_B = %b | real seg_C = %b | real seg_D = %b | real seg_E = %b | real seg_F = %b | real seg_G = %b | ",flag_N_prev,flag_Z_prev,S_prev,seg_A_prev,seg_B_prev,seg_C_prev,seg_D_prev,seg_E_prev,seg_F_prev,seg_G_prev);
`endif
	if (
		( flag_N_expected_prev !== 1'bx ) && ( flag_N_prev !== flag_N_expected_prev )
		&& ((flag_N_expected_prev !== last_flag_N_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_N_expected_prev);
		$display ("     Real value = %b", flag_N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_flag_N_exp = flag_N_expected_prev;
	end
	if (
		( flag_Z_expected_prev !== 1'bx ) && ( flag_Z_prev !== flag_Z_expected_prev )
		&& ((flag_Z_expected_prev !== last_flag_Z_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag_Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_Z_expected_prev);
		$display ("     Real value = %b", flag_Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_flag_Z_exp = flag_Z_expected_prev;
	end
	if (
		( S_expected_prev[0] !== 1'bx ) && ( S_prev[0] !== S_expected_prev[0] )
		&& ((S_expected_prev[0] !== last_S_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[0] = S_expected_prev[0];
	end
	if (
		( S_expected_prev[1] !== 1'bx ) && ( S_prev[1] !== S_expected_prev[1] )
		&& ((S_expected_prev[1] !== last_S_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[1] = S_expected_prev[1];
	end
	if (
		( S_expected_prev[2] !== 1'bx ) && ( S_prev[2] !== S_expected_prev[2] )
		&& ((S_expected_prev[2] !== last_S_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[2] = S_expected_prev[2];
	end
	if (
		( S_expected_prev[3] !== 1'bx ) && ( S_prev[3] !== S_expected_prev[3] )
		&& ((S_expected_prev[3] !== last_S_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_S_exp[3] = S_expected_prev[3];
	end
	if (
		( seg_A_expected_prev !== 1'bx ) && ( seg_A_prev !== seg_A_expected_prev )
		&& ((seg_A_expected_prev !== last_seg_A_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_A_expected_prev);
		$display ("     Real value = %b", seg_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg_A_exp = seg_A_expected_prev;
	end
	if (
		( seg_B_expected_prev !== 1'bx ) && ( seg_B_prev !== seg_B_expected_prev )
		&& ((seg_B_expected_prev !== last_seg_B_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_B_expected_prev);
		$display ("     Real value = %b", seg_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg_B_exp = seg_B_expected_prev;
	end
	if (
		( seg_C_expected_prev !== 1'bx ) && ( seg_C_prev !== seg_C_expected_prev )
		&& ((seg_C_expected_prev !== last_seg_C_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_C_expected_prev);
		$display ("     Real value = %b", seg_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg_C_exp = seg_C_expected_prev;
	end
	if (
		( seg_D_expected_prev !== 1'bx ) && ( seg_D_prev !== seg_D_expected_prev )
		&& ((seg_D_expected_prev !== last_seg_D_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_D_expected_prev);
		$display ("     Real value = %b", seg_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_seg_D_exp = seg_D_expected_prev;
	end
	if (
		( seg_E_expected_prev !== 1'bx ) && ( seg_E_prev !== seg_E_expected_prev )
		&& ((seg_E_expected_prev !== last_seg_E_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_E_expected_prev);
		$display ("     Real value = %b", seg_E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_seg_E_exp = seg_E_expected_prev;
	end
	if (
		( seg_F_expected_prev !== 1'bx ) && ( seg_F_prev !== seg_F_expected_prev )
		&& ((seg_F_expected_prev !== last_seg_F_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_F_expected_prev);
		$display ("     Real value = %b", seg_F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_seg_F_exp = seg_F_expected_prev;
	end
	if (
		( seg_G_expected_prev !== 1'bx ) && ( seg_G_prev !== seg_G_expected_prev )
		&& ((seg_G_expected_prev !== last_seg_G_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg_G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg_G_expected_prev);
		$display ("     Real value = %b", seg_G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_seg_G_exp = seg_G_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [1:0] op_sel;
// wires                                               
wire flag_N;
wire flag_Z;
wire [3:0] S;
wire seg_A;
wire seg_B;
wire seg_C;
wire seg_D;
wire seg_E;
wire seg_F;
wire seg_G;

wire sampler;                             

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.flag_N(flag_N),
	.flag_Z(flag_Z),
	.op_sel(op_sel),
	.S(S),
	.seg_A(seg_A),
	.seg_B(seg_B),
	.seg_C(seg_C),
	.seg_D(seg_D),
	.seg_E(seg_E),
	.seg_F(seg_F),
	.seg_G(seg_G)
);
// A[ 3 ]
always
begin
	A[3] = 1'b0;
	A[3] = #500000 1'b1;
	#500000;
end 
// A[ 2 ]
always
begin
	A[2] = 1'b0;
	A[2] = #250000 1'b1;
	#250000;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #125000 1'b1;
	#125000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #62500 1'b1;
	#62500;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// op_sel[ 1 ]
initial
begin
	op_sel[1] = 1'b0;
end 
// op_sel[ 0 ]
initial
begin
	op_sel[0] = 1'b0;
end 

ula_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.op_sel(op_sel),
	.sampler_tx(sampler)
);

ula_vlg_check_tst tb_out(
	.flag_N(flag_N),
	.flag_Z(flag_Z),
	.S(S),
	.seg_A(seg_A),
	.seg_B(seg_B),
	.seg_C(seg_C),
	.seg_D(seg_D),
	.seg_E(seg_E),
	.seg_F(seg_F),
	.seg_G(seg_G),
	.sampler_rx(sampler)
);
endmodule

