// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2023 00:49:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg clk;
reg div_sw;
reg [1:0] op_sel;
reg rst;
// wires                                               
wire A_0;
wire A_1;
wire B_0;
wire B_1;
wire C_0;
wire C_1;
wire D_0;
wire D_1;
wire E_0;
wire E_1;
wire F_0;
wire F_1;
wire G_0;
wire G_1;
wire [7:0] S;

// assign statements (if any)                          
counter i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.A_0(A_0),
	.A_1(A_1),
	.B_0(B_0),
	.B_1(B_1),
	.C_0(C_0),
	.C_1(C_1),
	.clk(clk),
	.D_0(D_0),
	.D_1(D_1),
	.div_sw(div_sw),
	.E_0(E_0),
	.E_1(E_1),
	.F_0(F_0),
	.F_1(F_1),
	.G_0(G_0),
	.G_1(G_1),
	.op_sel(op_sel),
	.rst(rst),
	.S(S)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #125000 1'b0;
	a[2] = #375000 1'b1;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
	a[1] = #250000 1'b1;
	a[1] = #250000 1'b0;
	a[1] = #250000 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #125000 1'b1;
	# 125000;
	repeat(2)
	begin
		a[0] = 1'b0;
		a[0] = #125000 1'b1;
		# 125000;
	end
	a[0] = 1'b0;
	a[0] = #125000 1'b1;
end 

// clk
initial
begin
	repeat(31)
	begin
		clk = 1'b0;
		clk = #15630 1'b1;
		# 15630;
	end
	clk = 1'b0;
	clk = #15630 1'b1;
end 

// div_sw
initial
begin
	div_sw = 1'b0;
end 
// op_sel[ 1 ]
initial
begin
	op_sel[1] = 1'b0;
	op_sel[1] = #500000 1'b1;
end 
// op_sel[ 0 ]
initial
begin
	op_sel[0] = 1'b0;
	op_sel[0] = #250000 1'b1;
	op_sel[0] = #250000 1'b0;
	op_sel[0] = #250000 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #10000 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

